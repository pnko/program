b<-cast(aqm,month~variable,mean)
b
c<-cast(aqm,month~.|variable,mean)
c
d<-cast(aqm,month~variable,mean,margins=c("grand_row","grand_col"))
d
e<-cast(aqm,day~month~variable,mean,subset=variable=="ozone")
e
f<-cast(aqm,month~variable,range)
f
data(iris)
library(sqldf)
data(iris)
install.packages("sqldf")
library(sqldf)
sqldf("select * from iris")
sqldf("select * from iris limit 10")
sqldf("select count(*) from iris where Species like 'Se%'")
set.seed(1)
d<-data.frame(year=rep(2000:2002,each=3),count=round(runif(9,0,20)))  # 9 numbers in 0:20
print(d)
library(reshape)
ddply(d,"year",function(x){
mean.count<-mean(x$count)
sd.count<-sd(x$count)
cv<-sd.count/mean.count
data.frame(cv.count=cv)
})
data(iris)
#install.packages("sqldf")
library(sqldf)
sqldf("select * from iris")
sqldf("select * from iris limit 10")
sqldf("select count(*) from iris where Species like 'Se%'")
set.seed(1)
d<-data.frame(year=rep(2000:2002,each=3),count=round(runif(9,0,20)))  # 9 numbers in 0:20
print(d)
library(reshape)
ddply(d,"year",function(x){
mean.count<-mean(x$count)
sd.count<-sd(x$count)
cv<-sd.count/mean.count
data.frame(cv.count=cv)
})
data(iris)
#install.packages("sqldf")
library(sqldf)
sqldf("select * from iris")
sqldf("select * from iris limit 10")
sqldf("select count(*) from iris where Species like 'Se%'")
set.seed(1)
d<-data.frame(year=rep(2000:2002,each=3),count=round(runif(9,0,20)))  # 9 numbers in 0:20
print(d)
library(reshape)
ddply(d,"year",function(x){
mean.count<-mean(x$count)
sd.count<-sd(x$count)
cv<-sd.count/mean.count
data.frame(cv.count=cv)
})
data(iris)
#install.packages("sqldf")
library(sqldf)
sqldf("select * from iris")
sqldf("select * from iris limit 10")
sqldf("select count(*) from iris where Species like 'Se%'")
set.seed(1)
d<-data.frame(year=rep(2000:2002,each=3),count=round(runif(9,0,20)))  # 9 numbers in 0:20
print(d)
Sys.Date()
as.Date("08/28/2013",format="%m/%d/%Y")
format(Sys.Date())
as.character(Sys.Date())
format(Sys.Date(),format="%m/%d/%Y")
format(Sys.Date(),format='%a')
format(Sys.Date(),format='%b')
format(Sys.Date(),format='%B')
format(Sys.Date(),format='%d')
format(Sys.Date(),format='%m')
format(Sys.Date(),format='%y')
format(Sys.Date(),format='%Y')
#행렬 Matrix 의 곱연산:
A=matrix(1:12, nrow=4, ncol=3, byrow=T)
B=matrix(c(1,0), nrow=3, ncol=2, byrow=T)
A%*%B
#전치행렬 (transpose of A)
t(A)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
#. Sorting
sort(X$var1)
sort(X$var1, decreasing=TRUE)
sort(X$var2, na.last=TRUE) # NA값은 마지막으로 정력
#. Ordering
X[order(X$var1),]
X[order(X$var1, X$var3),]
#Ordering with plyr
install.packages('plyr')
library(plyr)
arrange(X,var1)
arrange(X,desc(var1)) #data.frame 변수 정렬해주는 함수.
#데이터 요약(Summarizing Data)
fileUrl <-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="data/restaurants.csv")
restData <- read.csv("data/restaurants.csv")
head(restData, n=3) # 첫 3행
tail(restData, n=3) # 마지막 3행
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9))
table(restData$zipCode, useNA="ifany") #ZipCode의 갯수(NA일 경우 추가하라)
table(restData$councilDistrict, restData$zipCode) #지구별, 코드
#데이터 점검 Summary
table(restData$zipCode %in% c("21212")) #해당 zipCode의 포함되는 수 표시
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
restData$zipWrong = ifelse(restData$zipCode <0, TRUE, FALSE) #우편번호가 0보다 작으면 TRUE
table(restData$zipWrong, restData$zipCode <0)
library(plyr)
restData2 = mutate(restData, zipGroups= cut2(zipCode, g=4)) #기존에, 추가되서 나오네.
#. Sorting
sort(X$var1)
sort(X$var1, decreasing=TRUE)
sort(X$var2, na.last=TRUE) # NA값은 마지막으로 정력
#. Ordering
X[order(X$var1),]
X[order(X$var1, X$var3),]
#Ordering with plyr
install.packages('plyr')
library(plyr)
arrange(X,var1)
arrange(X,desc(var1)) #data.frame 변수 정렬해주는 함수.
install.packages("plyr")
# Sorting
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
sort(X$var1)
sort(X$var1, decreasing=TRUE)
sort(X$var2, na.last=TRUE) # NA값은 마지막으로 정력
# Ordering
X[order(X$var1),]
X[order(X$var1, X$var3),]
#Ordering with plyr
install.packages('plyr')
library(plyr)
arrange(X,var1)
arrange(X,desc(var1)) #data.frame 변수 정렬해주는 함수.
#데이터 요약(Summarizing Data)
fileUrl <-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="data/restaurants.csv")
restData <- read.csv("data/restaurants.csv")
head(restData, n=3) # 첫 3행
tail(restData, n=3) # 마지막 3행
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9))
table(restData$zipCode, useNA="ifany") #ZipCode의 갯수(NA일 경우 추가하라)
table(restData$councilDistrict, restData$zipCode) #지구별, 코드
#데이터 점검 Summary
table(restData$zipCode %in% c("21212")) #해당 zipCode의 포함되는 수 표시
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
restData$zipWrong = ifelse(restData$zipCode <0, TRUE, FALSE) #우편번호가 0보다 작으면 TRUE
table(restData$zipWrong, restData$zipCode <0)
library(plyr)
restData2 = mutate(restData, zipGroups= cut2(zipCode, g=4)) #기존에, 추가되서 나오네.
#데이터 요약(Summarizing Data)
fileUrl <-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="data/restaurants.csv")
restData <- read.csv("data/restaurants.csv")
head(restData, n=3) # 첫 3행
tail(restData, n=3) # 마지막 3행
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9))
table(restData$zipCode, useNA="ifany") #ZipCode의 갯수(NA일 경우 추가하라)
table(restData$councilDistrict, restData$zipCode) #지구별, 코드
#데이터 점검 Summary
table(restData$zipCode %in% c("21212")) #해당 zipCode의 포함되는 수 표시
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
restData$zipWrong = ifelse(restData$zipCode <0, TRUE, FALSE) #우편번호가 0보다 작으면 TRUE
table(restData$zipWrong, restData$zipCode <0)
#4분위수를 해당하는 값에 갯수 파악 Summary
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode)) #양적함수? cut?
table(restData$zipGroups)
#결과:(-2.123e+04,2.12e+04]  (2.12e+04,2.122e+04] (2.122e+04,2.123e+04] (2.123e+04,2.129e+04]
#       0~25%                   25~50%                50~75%                   75~100%
table(restData$zipGroups, restData$zipCode)
#Levels 로 데이터 점검 하기Summary
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode, g=4) #그룹 레벨 생성
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode) # 변수생성
restData$zcf[1:10]
class(restData$zcf)
##Cress tabs(변수를 행,열로 크로스 하여 보여준다)
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
##Flat tables(데이터를 평면으로 보여준다_)
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~ . , data=warpbreaks )
xt
ftable(xt) # 데이터를 보기 힘들기 때문에, 평면으로 보여준다.
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg","hp")) #id기준으로, mpg,hp변수를 항목으로 변환
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable) #에러
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum) #x,y = x는 메져, y는 디멘젼.멤버별, 합.
spIns = split(InsectSprays$count, InsectSprays$spray) #spray별로 리스트 형식으로 count를 정리한다.
sprCount = lapply(spIns, sum) #리스트로 된 항목을 sum하여 리스트로 반환
sprCount
unlist(sprCount) #리스트 형식을 벡터 형식으로
sapply(spIns, sum) #리스트 데이터를 벡터로 변환.
library(reshape)
ddply(InsectSprays, .(spray), summarize, sum=sum(count)) #spray기준으로 count를 요약
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg","hp")) #id기준으로, mpg,hp변수를 항목으로 변환
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable) #에러
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum) #x,y = x는 메져, y는 디멘젼.멤버별, 합.
spIns = split(InsectSprays$count, InsectSprays$spray) #spray별로 리스트 형식으로 count를 정리한다.
sprCount = lapply(spIns, sum) #리스트로 된 항목을 sum하여 리스트로 반환
sprCount
unlist(sprCount) #리스트 형식을 벡터 형식으로
sapply(spIns, sum) #리스트 데이터를 벡터로 변환.
install.packages("reshape")
library(reshape)
#month,day 변수 기준으로  모든 변수의 variable이 값으로 변수의 값은 Value로 변경.(결측값 제거 : na.rm=TRUE)
aqm <- melt(airquality, id=c("Month", "Day"), na.rm=TRUE)
# y축 day, x축 month, dimension과 measure에 해당되는 변수(variable)값을 표시한다.
a <- cast(aqm, Day ~ Month ~ variable)
# y축 month, x축 variable, 에 대한 월별 각 variable에 평균값 산출
b <- cast(aqm, Month ~ variable, mean)
# y축 month, x축 variable, 에 대한 월별 각 variable을 (항목[Member])분리해 평균값 표시
c <- cast(aqm, Month ~ . |variable, mean)
# margins 행("grand_row"), 열("grand_col")에 대한 소계 산출
d <- cast(aqm, Month ~ variable, mean, margins=c("grand_row","grand_col"))
# 특정변수만 처리하고자 하는 경우 서브세트 기능을 이용해 ozones에 대한 변수만 처리
e <- cast(aqm, Day ~ Month, mean, subset=variable=="Ozone")
# min, max를 동시에 표시해주는 range : min은 _X1, max는 _X2라는 suffix를 붙여준다.
f <- cast(aqm, Month ~ variable, range)
install.packages("reshape")
install.packages("plyr")
library(plyr)
set.seed(1)
d <- data.frame(year=rep(2000:2002, each=6), count=round(runif(9, 0, 20)))
print(d)
#year를 함수로 입력받고 year의 mean과 sd를 구해 각각 저장한 다음 cv를 구한다.
#결과를 year별로 리터하면데 데이터플레임을 생성하다. for loop도 없고 간단한 예제다.
ddply(d, "year", function(x) {
mean.count <-mean(x$count)
sd.count <- sd(x$count)
cv <- sd.count/mean.count
data.frame(mean.count, sd.count, cv.count = cv)
})
# transform  d 데이터 프레임의 전체 row 표현
# summarize 변수 year의 값들이 groupping되어 distinct한 row 표현
ddply(d, "year", summarise, mean.count = mean(count))
ddply(d, "year", transform, total.count = sum(count))
install.packages("sqldf")
library(sqldf)
#sqldf 함수의 "" 안에 sql로 표현
sqldf("select * from iris")  # iris 전체 데이터 조회
sqldf("select * from iris limit 10")  # iris 10행(Row)수 데이터 조회 = head(iris, 10)
#like문을 조건 ''안에 표현하여 사용된다
sqldf("select count(*) from iris where Species like 'Se%'")
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg","hp")) #id기준으로, mpg,hp변수를 항목으로 변환
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable) #에러
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum) #x,y = x는 메져, y는 디멘젼.멤버별, 합.
spIns = split(InsectSprays$count, InsectSprays$spray) #spray별로 리스트 형식으로 count를 정리한다.
sprCount = lapply(spIns, sum) #리스트로 된 항목을 sum하여 리스트로 반환
sprCount
unlist(sprCount) #리스트 형식을 벡터 형식으로
sapply(spIns, sum) #리스트 데이터를 벡터로 변환.
install.packages("reshape")
library(reshape)
#month,day 변수 기준으로  모든 변수의 variable이 값으로 변수의 값은 Value로 변경.(결측값 제거 : na.rm=TRUE)
aqm <- melt(airquality, id=c("Month", "Day"), na.rm=TRUE)
# y축 day, x축 month, dimension과 measure에 해당되는 변수(variable)값을 표시한다.
a <- cast(aqm, Day ~ Month ~ variable)
# y축 month, x축 variable, 에 대한 월별 각 variable에 평균값 산출
b <- cast(aqm, Month ~ variable, mean)
# y축 month, x축 variable, 에 대한 월별 각 variable을 (항목[Member])분리해 평균값 표시
c <- cast(aqm, Month ~ . |variable, mean)
# margins 행("grand_row"), 열("grand_col")에 대한 소계 산출
d <- cast(aqm, Month ~ variable, mean, margins=c("grand_row","grand_col"))
# 특정변수만 처리하고자 하는 경우 서브세트 기능을 이용해 ozones에 대한 변수만 처리
e <- cast(aqm, Day ~ Month, mean, subset=variable=="Ozone")
# min, max를 동시에 표시해주는 range : min은 _X1, max는 _X2라는 suffix를 붙여준다.
f <- cast(aqm, Month ~ variable, range)
head(mtcars)
mtcars$carname <- rownames(mtcars)
#carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg","hp")) #id기준으로, mpg,hp변수를 항목으로 변환
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable) #에러
install.packages("reshape")
library(reshape)
#month,day 변수 기준으로  모든 변수의 variable이 값으로 변수의 값은 Value로 변경.(결측값 제거 : na.rm=TRUE)
aqm <- melt(airquality, id=c("Month", "Day"), na.rm=TRUE)
# y축 day, x축 month, dimension과 measure에 해당되는 변수(variable)값을 표시한다.
a <- cast(aqm, Day ~ Month ~ variable)
# y축 month, x축 variable, 에 대한 월별 각 variable에 평균값 산출
b <- cast(aqm, Month ~ variable, mean)
# y축 month, x축 variable, 에 대한 월별 각 variable을 (항목[Member])분리해 평균값 표시
c <- cast(aqm, Month ~ . |variable, mean)
# margins 행("grand_row"), 열("grand_col")에 대한 소계 산출
d <- cast(aqm, Month ~ variable, mean, margins=c("grand_row","grand_col"))
# 특정변수만 처리하고자 하는 경우 서브세트 기능을 이용해 ozones에 대한 변수만 처리
e <- cast(aqm, Day ~ Month, mean, subset=variable=="Ozone")
# min, max를 동시에 표시해주는 range : min은 _X1, max는 _X2라는 suffix를 붙여준다.
f <- cast(aqm, Month ~ variable, range)
#install.packages("plyr")
library(plyr)
set.seed(1)
d <- data.frame(year=rep(2000:2002, each=6), count=round(runif(9, 0, 20)))
print(d)
#year를 함수로 입력받고 year의 mean과 sd를 구해 각각 저장한 다음 cv를 구한다.
#결과를 year별로 리터하면데 데이터플레임을 생성하다. for loop도 없고 간단한 예제다.
ddply(d, "year", function(x) {
mean.count <-mean(x$count)
sd.count <- sd(x$count)
cv <- sd.count/mean.count
data.frame(mean.count, sd.count, cv.count = cv)
})
# transform  d 데이터 프레임의 전체 row 표현
# summarize 변수 year의 값들이 groupping되어 distinct한 row 표현
ddply(d, "year", summarise, mean.count = mean(count))
ddply(d, "year", transform, total.count = sum(count))
install.packages("sqldf")
library(sqldf)
#sqldf 함수의 "" 안에 sql로 표현
sqldf("select * from iris")  # iris 전체 데이터 조회
sqldf("select * from iris limit 10")  # iris 10행(Row)수 데이터 조회 = head(iris, 10)
#like문을 조건 ''안에 표현하여 사용된다
sqldf("select count(*) from iris where Species like 'Se%'")
fileUrl1 <-"https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <-"https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv")
download.file(fileUrl2, destfile = "./data/solutions.csv")
reviews = read.csv("./data/reviews.csv");
solutions <- read.csv("./data/solutions.csv");
head(reviews)
head(solutions)
names(reviews)
names(solutions)
mergedData = merge(reviews, solutions, by.x="solution_id", by.y="id", all=TRUE)# x,y데이터를 병합, by.x, by.y기반으로 병합 모든 컬럼.
head(mergedData)
intersect(names(solutions), names(reviews)) # 교집합
margedData2 = merge(reviews, solutions, all=TRUE) # Row 병합
head(margedData2)
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
arrange(join(df1,df2), id) #plyr package
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
df3 = data.frame(id=sample(1:10), z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)#plyr package
fileUrl1 <-"https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <-"https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "data/reviews.csv")
download.file(fileUrl2, destfile = "data/solutions.csv")
reviews = read.csv("data/reviews.csv");
solutions <- read.csv("data/solutions.csv");
head(reviews)
head(solutions)
names(reviews)
names(solutions)
mergedData = merge(reviews, solutions, by.x="solution_id", by.y="id", all=TRUE)# x,y데이터를 병합, by.x, by.y기반으로 병합 모든 컬럼.
head(mergedData)
intersect(names(solutions), names(reviews)) # 교집합
margedData2 = merge(reviews, solutions, all=TRUE) # Row 병합
head(margedData2)
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
arrange(join(df1,df2), id) #plyr package
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
df3 = data.frame(id=sample(1:10), z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)#plyr package
d1 = date()
class(d1)
d2 = Sys.Date()
class(d2)
# %d = (0-31), %a = 월-일, %A = 월요일-일요일, %m = (00-12), %B = 1월~12월, %y =(14), %Y = (2014)
format(d2, "%a %b %d %B")
x = c("1jan1960", "2jan1960", "31mar1960", "30jul1960");
z = as.Date(x, "%d%b%Y")
z[1]-z[2]
as.numeric(z[1]-z[2])
d2 <- c(seq(as.Date(d2[1]+1),as.Date(d2[1]+10),by=2))
weekdays(d2) #요일
months(d2)  #월
julian(d2) #줄리안 데이터 1970-01-01이 시작 1이다.
install.packages("lubridate")
library(lubridate)
ymd("20140108") # 에러나네..페키지 이상함.
mdy("08/04/2013")
dmy("03-04-2013")
ymd_hms("2011-03-04 10:15:03")
ymd_hms("2011-03-04 10:15:03", tz="Pacific/Auckland")
?Sys.timezone
x = dmy(c("1jan1960", "2jan1960", "31mar1960", "30jul1960"))
wday(x[1])
wday(x[1], label=TRUE)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") ## with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month ==5),  points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month !=5),  points(Wind, Ozone, col = "red"))
legend("topright", pch =1, col = c("blue", "red"), legend = c("May", "Order Months" ))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppd)")
par("lty","col","pch","bg","mar","mfrow")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") ## with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month ==5),  points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month !=5),  points(Wind, Ozone, col = "red"))
legend("topright", pch =1, col = c("blue", "red"), legend = c("May", "Order Months" ))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppd)")
par("lty","col","pch","bg","mar","mfrow")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") ## with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month ==5),  points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month !=5),  points(Wind, Ozone, col = "red"))
legend("topright", pch =1, col = c("blue", "red"), legend = c("May", "Order Months" ))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppd)")
par("lty","col","pch","bg","mar","mfrow")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
example(points)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
z <- rnorm(100)
plot(x,z)
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,4,2,2))
plot(x,y, pch = 10)
plot(x,y, pch = 4)
plot(x,y, pch = 20)
title("lable")
text(-2, -2, "Lable")
legend("topleft", legend = "Data")
fit <- lm(y ~ x)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm.fit(Ozone ~ Wind, airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ Wind, airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"), pch = 20)
model <- lm(Ozone ~ , airquality)
install.packages("lattice")
library(lattice)
xyplot(Ozone ~ Wind, data = airquality)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month =factor(Month))
xyplot(Ozone ~ Wind | Month , data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p) #plot appears
xyplot(Ozone ~ Wind, data = airquality) #auto-printing
getwd()
setwd("C:\\kimhk\\workspace\\R\\Notebook")
getwd()
